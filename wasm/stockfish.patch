diff --git a/src/misc.cpp b/src/misc.cpp
index 2bc05c5..c4af087 100644
--- a/src/misc.cpp
+++ b/src/misc.cpp
@@ -46,6 +46,8 @@ typedef bool(*fun3_t)(HANDLE, CONST GROUP_AFFINITY*, PGROUP_AFFINITY);
 #include <iostream>
 #include <sstream>
 #include <vector>
+#include <emscripten.h>
+#include <emscripten/threading.h>
 
 #if defined(__linux__) && !defined(__ANDROID__)
 #include <stdlib.h>
@@ -54,6 +56,8 @@ typedef bool(*fun3_t)(HANDLE, CONST GROUP_AFFINITY*, PGROUP_AFFINITY);
 
 #include "misc.h"
 #include "thread.h"
+#include "syzygy/tbprobe.h"
+#include "glue.hpp"
 
 using namespace std;
 
@@ -249,19 +253,30 @@ void dbg_print() {
 /// Used to serialize access to std::cout to avoid multiple threads writing at
 /// the same time.
 
-std::ostream& operator<<(std::ostream& os, SyncCout sc) {
+std::ostream& operator<<(std::ostream& os, FishCoutCommand cmd) {
 
-  static std::mutex m;
+  static std::mutex sstream_mutex;
 
-  if (sc == IO_LOCK)
-      m.lock();
-
-  if (sc == IO_UNLOCK)
-      m.unlock();
-
-  return os;
+  if (cmd == FishCoutCommand::ACQUIRE) sstream_mutex.lock();
+  if (cmd == FishCoutCommand::FLUSH) {
+    string response = fish_cout.str();
+    fish_cout.str("");
+    fish_cout.clear();
+    sstream_mutex.unlock();
+    zerofish::fish_out(response);
+  }
+ return os;
 }
 
+// stubs for tbprobe.cpp (so we don't need -sALLOW_UNIMPLEMENTED_SYSCALLS)
+namespace Tablebases {
+  int MaxCardinality = 0;
+  void     init(const std::string& paths) {}
+  WDLScore probe_wdl(Position& pos, ProbeState* result) { return WDLDraw; }
+  int      probe_dtz(Position& pos, ProbeState* result) { return 0; }
+  bool root_probe(Position& pos, Search::RootMoves& rootMoves) { return false; }
+  bool root_probe_wdl(Position& pos, Search::RootMoves& rootMoves) { return false; }
+}
 
 /// Trampoline helper to avoid moving Logger to misc.h
 void start_logger(const std::string& fname) { Logger::start(fname); }
diff --git a/src/misc.h b/src/misc.h
index 373f1b7..15155be 100644
--- a/src/misc.h
+++ b/src/misc.h
@@ -26,6 +26,7 @@
 #include <ostream>
 #include <string>
 #include <vector>
+#include <sstream>
 
 #include "types.h"
 
@@ -59,11 +60,12 @@ private:
 };
 
 
-enum SyncCout { IO_LOCK, IO_UNLOCK };
-std::ostream& operator<<(std::ostream&, SyncCout);
 
-#define sync_cout std::cout << IO_LOCK
-#define sync_endl std::endl << IO_UNLOCK
+enum FishCoutCommand { ACQUIRE, FLUSH };
+std::ostream& operator<<(std::ostream&, FishCoutCommand);
+inline std::stringstream fish_cout;
+#define sync_cout fish_cout << FishCoutCommand::ACQUIRE
+#define sync_endl FishCoutCommand::FLUSH
 
 namespace Utility {
 
diff --git a/src/search.cpp b/src/search.cpp
index 91ac60a..a19053d 100644
--- a/src/search.cpp
+++ b/src/search.cpp
@@ -96,7 +96,7 @@ namespace {
   struct Skill {
     explicit Skill(int l) : level(l) {}
     bool enabled() const { return level < 20; }
-    bool time_to_pick(Depth depth) const { return depth == 1 + level; }
+    bool time_to_pick(Depth depth) const { return depth >= 1 + level; }
     Move pick_best(size_t multiPV);
 
     int level;
@@ -278,9 +278,9 @@ void MainThread::search() {
   sync_cout << "bestmove " << UCI::move(bestThread->rootMoves[0].pv[0], rootPos.is_chess960());
 
   if (bestThread->rootMoves[0].pv.size() > 1 || bestThread->rootMoves[0].extract_ponder_from_tt(rootPos))
-      std::cout << " ponder " << UCI::move(bestThread->rootMoves[0].pv[1], rootPos.is_chess960());
+      fish_cout << " ponder " << UCI::move(bestThread->rootMoves[0].pv[1], rootPos.is_chess960());
 
-  std::cout << sync_endl;
+  fish_cout << sync_endl;
 }
 
 
@@ -335,7 +335,7 @@ void Thread::search() {
   // for match (TC 60+0.6) results spanning a wide range of k values.
   PRNG rng(now());
   double floatLevel = Options["UCI_LimitStrength"] ?
-                      Utility::clamp(std::pow((Options["UCI_Elo"] - 1346.6) / 143.4, 1 / 0.806), 0.0, 20.0) :
+                      Utility::clamp(std::pow((Options["UCI_Elo"] - 1346.6) / 143.4, 1 / 0.806), -10.0, 20.0) :
                         double(Options["Skill Level"]);
   int intLevel = int(floatLevel) +
                  ((floatLevel - int(floatLevel)) * 1024 > rng.rand<unsigned>() % 1024  ? 1 : 0);
@@ -1776,14 +1776,12 @@ moves_loop: // When in check, search starts from here
         // This is our magic formula
         int push = (  weakness * int(topScore - rootMoves[i].score)
                     + delta * (rng.rand<unsigned>() % weakness)) / 128;
-
         if (rootMoves[i].score + push >= maxScore)
         {
             maxScore = rootMoves[i].score + push;
             best = rootMoves[i].pv[0];
         }
     }
-
     return best;
   }
 
@@ -1829,7 +1827,7 @@ void MainThread::check_time() {
 string UCI::pv(const Position& pos, Depth depth, Value alpha, Value beta) {
 
   std::stringstream ss;
-  TimePoint elapsed = Time.elapsed() + 1;
+  TimePoint elapsed = std::max(Time.elapsed() + 1, TimePoint(1));
   const RootMoves& rootMoves = pos.this_thread()->rootMoves;
   size_t pvIdx = pos.this_thread()->pvIdx;
   size_t multiPV = std::min((size_t)Options["MultiPV"], rootMoves.size());
@@ -1914,6 +1912,8 @@ bool RootMove::extract_ponder_from_tt(Position& pos) {
 void Tablebases::rank_root_moves(Position& pos, Search::RootMoves& rootMoves) {
 
     RootInTB = false;
+    Cardinality = 0;
+    return;
     UseRule50 = bool(Options["Syzygy50MoveRule"]);
     ProbeDepth = int(Options["SyzygyProbeDepth"]);
     Cardinality = int(Options["SyzygyProbeLimit"]);
diff --git a/src/tt.cpp b/src/tt.cpp
index 3459090..e0caed9 100644
--- a/src/tt.cpp
+++ b/src/tt.cpp
@@ -82,6 +82,9 @@ void TranspositionTable::resize(size_t mbSize) {
 //  in a multi-threaded way.
 
 void TranspositionTable::clear() {
+  std::memset(table, 0, clusterCount * sizeof(Cluster));
+  // no new threads for wasm, otherwise terrible things.
+  return;
 
   std::vector<std::thread> threads;
 
diff --git a/src/uci.cpp b/src/uci.cpp
index bb57c80..ca03c03 100644
--- a/src/uci.cpp
+++ b/src/uci.cpp
@@ -207,6 +207,30 @@ namespace {
 
 } // namespace
 
+void UCI::process_command(const string& cmd, Position& pos, StateListPtr& states) {
+  istringstream is(cmd);
+
+  string token;
+  is >> skipws >> token;
+
+  if (    token == "quit"
+      ||  token == "stop")
+      Threads.stop = true;
+
+  else if (token == "uci")
+      sync_cout << "id name " << engine_info(true)
+                << "\n"       << Options
+                << "\nuciok"  << sync_endl;
+
+  else if (token == "setoption")  setoption(is);
+  else if (token == "go")         go(pos, is, states);
+  else if (token == "position")   position(pos, is, states);
+  else if (token == "ucinewgame") Search::clear();
+  else if (token == "isready")    sync_cout << "readyok" << sync_endl;
+
+  else if (!token.empty() && token[0] != '#')
+      sync_cout << "Unknown command: '" << cmd << "'. Type help for more information." << sync_endl;
+}
 
 /// UCI::loop() waits for a command from stdin, parses it and calls the appropriate
 /// function. Also intercepts EOF from stdin to ensure gracefully exiting if the
diff --git a/src/uci.h b/src/uci.h
index ad954d9..e36a676 100644
--- a/src/uci.h
+++ b/src/uci.h
@@ -68,6 +68,7 @@ private:
 };
 
 void init(OptionsMap&);
+void process_command(const std::string& cmd, Position& pos, StateListPtr& states);
 void loop(int argc, char* argv[]);
 std::string value(Value v);
 std::string square(Square s);
diff --git a/src/ucioption.cpp b/src/ucioption.cpp
index ef54ef4..ce28308 100644
--- a/src/ucioption.cpp
+++ b/src/ucioption.cpp
@@ -62,18 +62,18 @@ void init(OptionsMap& o) {
   o["Contempt"]              << Option(24, -100, 100);
   o["Analysis Contempt"]     << Option("Both var Off var White var Black var Both", "Both");
   o["Threads"]               << Option(1, 1, 512, on_threads);
-  o["Hash"]                  << Option(16, 1, MaxHashMB, on_hash_size);
+  o["Hash"]                  << Option(1, 1, MaxHashMB, on_hash_size);
   o["Clear Hash"]            << Option(on_clear_hash);
   o["Ponder"]                << Option(false);
   o["MultiPV"]               << Option(1, 1, 500);
-  o["Skill Level"]           << Option(20, 0, 20);
+  o["Skill Level"]           << Option(20, -10, 20);
   o["Move Overhead"]         << Option(10, 0, 5000);
   o["Slow Mover"]            << Option(100, 10, 1000);
   o["nodestime"]             << Option(0, 0, 10000);
   o["UCI_Chess960"]          << Option(false);
   o["UCI_AnalyseMode"]       << Option(false);
   o["UCI_LimitStrength"]     << Option(false);
-  o["UCI_Elo"]               << Option(1350, 1350, 2850);
+  o["UCI_Elo"]               << Option(1350, 350, 2850);
   o["UCI_ShowWDL"]           << Option(false);
   o["SyzygyPath"]            << Option("<empty>", on_tb_path);
   o["SyzygyProbeDepth"]      << Option(1, 1, 100);
