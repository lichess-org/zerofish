diff --git a/.gitignore b/.gitignore
index c90b403..29cb4b5 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,5 +1,6 @@
 !subprojects/*.wrap
 *.swp
+*.o
 .clang_complete
 .DS_Store
 .cache/
@@ -10,6 +11,7 @@ compile_commands.json
 CUDA_NN/
 lc0.xcodeproj/
 LC0VSProj/
+src/proto/
 src/.vs/
 subprojects/*
 testdata/
diff --git a/src/chess/pgn.h b/src/chess/pgn.h
index 512d4c6..2588f11 100644
--- a/src/chess/pgn.h
+++ b/src/chess/pgn.h
@@ -27,8 +27,6 @@
 
 #pragma once
 
-#include <zlib.h>
-
 #include <algorithm>
 #include <cctype>
 #include <cerrno>
@@ -46,11 +44,11 @@ struct Opening {
   MoveList moves;
 };
 
-inline bool GzGetLine(gzFile file, std::string& line) {
+inline bool GetLine(FILE *file, std::string& line) {
   bool flag = false;
   char s[2000];
   line.clear();
-  while (gzgets(file, s, sizeof(s))) {
+  while (fgets(s, sizeof(s), file)) {
     flag = true;
     line += s;
     auto r = line.find_last_of('\n');
@@ -65,7 +63,7 @@ inline bool GzGetLine(gzFile file, std::string& line) {
 class PgnReader {
  public:
   void AddPgnFile(const std::string& filepath) {
-    const gzFile file = gzopen(filepath.c_str(), "r");
+    const FILE *file = fopen(filepath.c_str(), "r");
     if (!file) {
       throw Exception(errno == ENOENT ? "Opening book file not found."
                                       : "Error opening opening book file.");
@@ -74,7 +72,7 @@ class PgnReader {
     std::string line;
     bool in_comment = false;
     bool started = false;
-    while (GzGetLine(file, line)) {
+    while (GetLine(file, line)) {
       // Check if we have a UTF-8 BOM. If so, just ignore it.
       // Only supposed to exist in the first line, but should not matter.
       if (line.substr(0,3) == "\xEF\xBB\xBF") line = line.substr(3);
diff --git a/src/chess/uciloop.cc b/src/chess/uciloop.cc
index ad76b25..f3c133e 100644
--- a/src/chess/uciloop.cc
+++ b/src/chess/uciloop.cc
@@ -41,6 +41,7 @@
 #include "utils/logging.h"
 #include "utils/string.h"
 #include "version.h"
+#include "glue.hpp"
 
 namespace lczero {
 
@@ -145,6 +146,16 @@ void UciLoop::RunLoop() {
   }
 }
 
+void UciLoop::ProcessCommand(const std::string& command) {
+  try {
+    auto parsed_command = ParseCommand(command);
+    if (parsed_command.first.empty()) return;
+    DispatchCommand(parsed_command.first, parsed_command.second);
+  } catch (Exception& ex) {
+    SendResponse(std::string("error ") + ex.what());
+  }
+}
+
 bool UciLoop::DispatchCommand(
     const std::string& command,
     const std::unordered_map<std::string, std::string>& params) {
@@ -219,11 +230,9 @@ void UciLoop::SendResponse(const std::string& response) {
 }
 
 void UciLoop::SendResponses(const std::vector<std::string>& responses) {
-  static std::mutex output_mutex;
-  std::lock_guard<std::mutex> lock(output_mutex);
-  for (auto& response : responses) {
-    LOGFILE << "<< " << response;
-    std::cout << response << std::endl;
+  std::string all;
+  for (auto it = responses.begin(); it != responses.end(); it++) {
+    zerofish::zero_out(*it);
   }
 }
 
diff --git a/src/chess/uciloop.h b/src/chess/uciloop.h
index bae8e3d..558d264 100644
--- a/src/chess/uciloop.h
+++ b/src/chess/uciloop.h
@@ -56,7 +56,7 @@ class UciLoop {
  public:
   virtual ~UciLoop() {}
   virtual void RunLoop();
-
+  virtual void ProcessCommand(const std::string& command);
   // Sends response to host.
   void SendResponse(const std::string& response);
   // Sends responses to host ensuring they are received as a block.
diff --git a/src/engine.cc b/src/engine.cc
index a632ebb..dcafd65 100644
--- a/src/engine.cc
+++ b/src/engine.cc
@@ -30,9 +30,11 @@
 #include <algorithm>
 #include <cmath>
 #include <functional>
+#include <emscripten/threading.h>
 
 #include "mcts/search.h"
 #include "mcts/stoppers/factory.h"
+#include "neural/loader.h"
 #include "utils/configfile.h"
 #include "utils/logging.h"
 
@@ -99,7 +101,6 @@ void EngineController::PopulateOptions(OptionsParser* options) {
   options->Add<IntOption>(kNNCacheSizeId, 0, 999999999) = 2000000;
   SearchParams::Populate(options);
 
-  options->Add<StringOption>(kSyzygyTablebaseId);
   // Add "Ponder" option to signal to GUIs that we support pondering.
   // This option is currently not used by lc0 in any way.
   options->Add<BoolOption>(kPonderId) = true;
@@ -107,7 +108,6 @@ void EngineController::PopulateOptions(OptionsParser* options) {
   options->Add<BoolOption>(kShowWDL) = false;
   options->Add<BoolOption>(kShowMovesleft) = false;
 
-  ConfigFile::PopulateOptions(options);
   PopulateTimeManagementOptions(RunType::kUci, options);
 
   options->Add<BoolOption>(kStrictUciTiming) = false;
@@ -120,30 +120,25 @@ void EngineController::ResetMoveTimer() {
   move_start_time_ = std::chrono::steady_clock::now();
 }
 
-// Updates values from Uci options.
-void EngineController::UpdateFromUciOptions() {
+void EngineController::SetWeights(const std::optional<WeightsFile>& weights) {
   SharedLock lock(busy_mutex_);
 
-  // Syzygy tablebases.
-  std::string tb_paths = options_.Get<std::string>(kSyzygyTablebaseId);
-  if (!tb_paths.empty() && tb_paths != tb_paths_) {
-    syzygy_tb_ = std::make_unique<SyzygyTablebase>();
-    CERR << "Loading Syzygy tablebases from " << tb_paths;
-    if (!syzygy_tb_->init(tb_paths)) {
-      CERR << "Failed to load Syzygy tablebases!";
-      syzygy_tb_ = nullptr;
-    } else {
-      tb_paths_ = tb_paths;
-    }
-  }
-
   // Network.
   const auto network_configuration =
       NetworkFactory::BackendConfiguration(options_);
-  if (network_configuration_ != network_configuration) {
-    network_ = NetworkFactory::LoadNetwork(options_);
-    network_configuration_ = network_configuration;
-  }
+  network_ = NetworkFactory::LoadNetwork(options_, weights);
+  network_configuration_ = network_configuration;
+  
+  // Cache size.
+  cache_.SetCapacity(options_.Get<int>(kNNCacheSizeId));
+
+  // Check whether we can update the move timer in "Go".
+  strict_uci_timing_ = options_.Get<bool>(kStrictUciTiming);
+}
+
+// Updates values from Uci options.
+void EngineController::UpdateFromUciOptions() {
+  SharedLock lock(busy_mutex_);
 
   // Cache size.
   cache_.SetCapacity(options_.Get<int>(kNNCacheSizeId));
@@ -325,10 +320,7 @@ EngineLoop::EngineLoop()
 }
 
 void EngineLoop::RunLoop() {
-  if (!ConfigFile::Init() || !options_.ProcessAllFlags()) return;
-  const auto options = options_.GetOptionsDict();
-  Logging::Get().SetFilename(options.Get<std::string>(kLogFileId));
-  if (options.Get<bool>(kPreload)) engine_.NewGame();
+  if (!options_.ProcessAllFlags()) return;
   UciLoop::RunLoop();
 }
 
@@ -345,12 +337,14 @@ void EngineLoop::CmdIsReady() {
   SendResponse("readyok");
 }
 
+void EngineLoop::SetWeightsBuffer(const unsigned char *buffer, size_t size) {
+  engine_.SetWeights(LoadWeightsFromBuffer(buffer, size));
+  std::free((void *)buffer);
+}
+
 void EngineLoop::CmdSetOption(const std::string& name, const std::string& value,
                               const std::string& context) {
   options_.SetUciOption(name, value, context);
-  // Set the log filename for the case it was set in UCI option.
-  Logging::Get().SetFilename(
-      options_.GetOptionsDict().Get<std::string>(kLogFileId));
 }
 
 void EngineLoop::CmdUciNewGame() { engine_.NewGame(); }
diff --git a/src/engine.h b/src/engine.h
index 9743679..04976b9 100644
--- a/src/engine.h
+++ b/src/engine.h
@@ -75,10 +75,10 @@ class EngineController {
   void Stop();
 
   Position ApplyPositionMoves();
+  void SetWeights(const std::optional<WeightsFile>& network);
 
  private:
   void UpdateFromUciOptions();
-
   void SetupPosition(const std::string& fen,
                      const std::vector<std::string>& moves);
   void ResetMoveTimer();
@@ -120,6 +120,7 @@ class EngineLoop : public UciLoop {
  public:
   EngineLoop();
 
+  void SetWeightsBuffer(const unsigned char *buf, size_t len);
   void RunLoop() override;
   void CmdUci() override;
   void CmdIsReady() override;
diff --git a/src/mcts/params.cc b/src/mcts/params.cc
index 6fbc4cf..483151c 100644
--- a/src/mcts/params.cc
+++ b/src/mcts/params.cc
@@ -42,7 +42,7 @@
 #define DEFAULT_MAX_PREFETCH 32
 #endif
 #ifndef DEFAULT_TASK_WORKERS
-#define DEFAULT_TASK_WORKERS 4
+#define DEFAULT_TASK_WORKERS 0
 #endif
 
 namespace lczero {
diff --git a/src/mcts/search.cc b/src/mcts/search.cc
index 6fe8d1c..4267b3b 100644
--- a/src/mcts/search.cc
+++ b/src/mcts/search.cc
@@ -59,18 +59,6 @@ MoveList MakeRootMoveFilter(const MoveList& searchmoves,
   if (!searchmoves.empty()) return searchmoves;
   const auto& board = history.Last().GetBoard();
   MoveList root_moves;
-  if (!syzygy_tb || !board.castlings().no_legal_castle() ||
-      (board.ours() | board.theirs()).count() > syzygy_tb->max_cardinality()) {
-    return root_moves;
-  }
-  if (syzygy_tb->root_probe(
-          history.Last(), fast_play || history.DidRepeatSinceLastZeroingMove(),
-          &root_moves)) {
-    *dtz_success = true;
-    tb_hits->fetch_add(1, std::memory_order_acq_rel);
-  } else if (syzygy_tb->root_probe_wdl(history.Last(), &root_moves)) {
-    tb_hits->fetch_add(1, std::memory_order_acq_rel);
-  }
   return root_moves;
 }
 
@@ -1866,43 +1854,6 @@ void SearchWorker::ExtendNode(Node* node, int depth,
                          Node::Terminal::TwoFold);
       return;
     }
-
-    // Neither by-position or by-rule termination, but maybe it's a TB position.
-    if (search_->syzygy_tb_ && !search_->root_is_in_dtz_ &&
-        board.castlings().no_legal_castle() &&
-        history->Last().GetRule50Ply() == 0 &&
-        (board.ours() | board.theirs()).count() <=
-            search_->syzygy_tb_->max_cardinality()) {
-      ProbeState state;
-      const WDLScore wdl =
-          search_->syzygy_tb_->probe_wdl(history->Last(), &state);
-      // Only fail state means the WDL is wrong, probe_wdl may produce correct
-      // result with a stat other than OK.
-      if (state != FAIL) {
-        // TB nodes don't have NN evaluation, assign M from parent node.
-        float m = 0.0f;
-        // Need a lock to access parent, in case MakeSolid is in progress.
-        {
-          SharedMutex::SharedLock lock(search_->nodes_mutex_);
-          auto parent = node->GetParent();
-          if (parent) {
-            m = std::max(0.0f, parent->GetM() - 1.0f);
-          }
-        }
-        // If the colors seem backwards, check the checkmate check above.
-        if (wdl == WDL_WIN) {
-          node->MakeTerminal(GameResult::BLACK_WON, m,
-                             Node::Terminal::Tablebase);
-        } else if (wdl == WDL_LOSS) {
-          node->MakeTerminal(GameResult::WHITE_WON, m,
-                             Node::Terminal::Tablebase);
-        } else {  // Cursed wins and blessed losses count as draws.
-          node->MakeTerminal(GameResult::DRAW, m, Node::Terminal::Tablebase);
-        }
-        search_->tb_hits_.fetch_add(1, std::memory_order_acq_rel);
-        return;
-      }
-    }
   }
 
   // Add legal moves as edges of this node.
diff --git a/src/mcts/stoppers/common.cc b/src/mcts/stoppers/common.cc
index f969725..7c2664b 100644
--- a/src/mcts/stoppers/common.cc
+++ b/src/mcts/stoppers/common.cc
@@ -25,7 +25,7 @@
   Program grant you additional permission to convey the resulting work.
 */
 
-#include "src/mcts/stoppers/common.h"
+#include "mcts/stoppers/common.h"
 
 namespace lczero {
 
diff --git a/src/neural/blas/network_blas.cc b/src/neural/blas/network_blas.cc
index 3edc1f1..8a99fbe 100644
--- a/src/neural/blas/network_blas.cc
+++ b/src/neural/blas/network_blas.cc
@@ -702,7 +702,7 @@ BlasNetwork<use_eigen>::BlasNetwork(const WeightsFile& file,
     weights_.policy.weights = WinogradFilterTransformF(weights_.policy.weights,
                                                        pol_channels, channels);
   }
-
+  return;
   if (use_eigen) {
     CERR << "Using Eigen version " << EIGEN_WORLD_VERSION << "."
          << EIGEN_MAJOR_VERSION << "." << EIGEN_MINOR_VERSION;
diff --git a/src/neural/factory.cc b/src/neural/factory.cc
index 03c69ef..00d410b 100644
--- a/src/neural/factory.cc
+++ b/src/neural/factory.cc
@@ -30,7 +30,6 @@
 #include <algorithm>
 
 #include "neural/loader.h"
-#include "utils/commandline.h"
 #include "utils/logging.h"
 
 namespace lczero {
@@ -88,7 +87,6 @@ std::vector<std::string> NetworkFactory::GetBackendsList() const {
 std::unique_ptr<Network> NetworkFactory::Create(
     const std::string& network, const std::optional<WeightsFile>& weights,
     const OptionsDict& options) {
-  CERR << "Creating backend [" << network << "]...";
   for (const auto& factory : factories_) {
     if (factory.name == network) {
       return factory.factory(weights, options);
@@ -110,23 +108,13 @@ bool NetworkFactory::BackendConfiguration::operator==(
 }
 
 std::unique_ptr<Network> NetworkFactory::LoadNetwork(
-    const OptionsDict& options) {
+    const OptionsDict& options, const std::optional<WeightsFile>& bufferedWeights) {
   std::string net_path = options.Get<std::string>(kWeightsId);
   const std::string backend = options.Get<std::string>(kBackendId);
   const std::string backend_options =
       options.Get<std::string>(kBackendOptionsId);
 
-  if (net_path == kAutoDiscover) {
-    net_path = DiscoverWeightsFile();
-  } else if (net_path == kEmbed) {
-    net_path = CommandLine::BinaryName();
-  } else {
-    CERR << "Loading weights file from: " << net_path;
-  }
-  std::optional<WeightsFile> weights;
-  if (!net_path.empty()) {
-    weights = LoadWeightsFromFile(net_path);
-  }
+  std::optional<WeightsFile> weights(std::move(bufferedWeights));
 
   OptionsDict network_options(&options);
   network_options.AddSubdictFromString(backend_options);
diff --git a/src/neural/factory.h b/src/neural/factory.h
index 4448aa3..98ac02a 100644
--- a/src/neural/factory.h
+++ b/src/neural/factory.h
@@ -68,7 +68,8 @@ class NetworkFactory {
 
   // Helper function to load the network from the options. Returns nullptr
   // if no network options changed since the previous call.
-  static std::unique_ptr<Network> LoadNetwork(const OptionsDict& options);
+  static std::unique_ptr<Network> LoadNetwork(const OptionsDict& options, 
+                                              const std::optional<WeightsFile>& weights);
 
   // Parameter IDs.
   static const OptionId kWeightsId;
diff --git a/src/neural/loader.cc b/src/neural/loader.cc
index 7f3ff3e..a445ca7 100644
--- a/src/neural/loader.cc
+++ b/src/neural/loader.cc
@@ -27,8 +27,6 @@
 
 #include "neural/loader.h"
 
-#include <zlib.h>
-
 #include <algorithm>
 #include <cassert>
 #include <cctype>
@@ -52,92 +50,23 @@
 
 namespace lczero {
 
-namespace {
 const std::uint32_t kWeightMagic = 0x1c0;
 
-std::string DecompressGzip(const std::string& filename) {
-  const int kStartingSize = 8 * 1024 * 1024;  // 8M
-  std::string buffer;
-  buffer.resize(kStartingSize);
-  int bytes_read = 0;
-
-  // Read whole file into a buffer.
-  FILE* fp = fopen(filename.c_str(), "rb");
-  if (!fp) {
-    throw Exception("Cannot read weights from " + filename);
-  }
-  if (filename == CommandLine::BinaryName()) {
-    // The network file should be appended at the end of the lc0 executable,
-    // followed by the network file size and a "Lc0!" (0x2130634c) magic.
-    int32_t size, magic;
-    if (fseek(fp, -8, SEEK_END) || fread(&size, 4, 1, fp) != 1 ||
-        fread(&magic, 4, 1, fp) != 1 || magic != 0x2130634c) {
-      fclose(fp);
-      throw Exception("No embedded file detected.");
-    }
-    fseek(fp, -size - 8, SEEK_END);
-  }
-  fflush(fp);
-  gzFile file = gzdopen(dup(fileno(fp)), "rb");
-  fclose(fp);
-  if (!file) {
-    throw Exception("Cannot process file " + filename);
-  }
-  while (true) {
-    const int sz =
-        gzread(file, &buffer[bytes_read], buffer.size() - bytes_read);
-    if (sz < 0) {
-      int errnum;
-      throw Exception(gzerror(file, &errnum));
-    }
-    if (sz == static_cast<int>(buffer.size()) - bytes_read) {
-      bytes_read = buffer.size();
-      buffer.resize(buffer.size() * 2);
-    } else {
-      bytes_read += sz;
-      buffer.resize(bytes_read);
-      break;
-    }
+WeightsFile LoadWeightsFromBuffer(const unsigned char *buf, size_t sz) {
+  std::string pb((const char *)buf, sz);
+  if (pb.size() < 2) {
+    throw Exception("Invalid weight file: too small.");
   }
-  gzclose(file);
-
-  return buffer;
-}
-
-void FixOlderWeightsFile(WeightsFile* file) {
-  using nf = pblczero::NetworkFormat;
-  auto network_format = file->format().network_format().network();
-  const auto has_network_format = file->format().has_network_format();
-  if (has_network_format && network_format != nf::NETWORK_CLASSICAL &&
-      network_format != nf::NETWORK_SE) {
-    // Already in a new format, return unchanged.
-    return;
+  if (pb[0] == '1' && pb[1] == '\n') {
+    throw Exception("Invalid weight file: no longer supported.");
   }
-
-  auto* net = file->mutable_format()->mutable_network_format();
-  if (!has_network_format) {
-    // Older protobufs don't have format definition.
-    net->set_input(nf::INPUT_CLASSICAL_112_PLANE);
-    net->set_output(nf::OUTPUT_CLASSICAL);
-    net->set_network(nf::NETWORK_CLASSICAL_WITH_HEADFORMAT);
-    net->set_value(nf::VALUE_CLASSICAL);
-    net->set_policy(nf::POLICY_CLASSICAL);
-  } else if (network_format == pblczero::NetworkFormat::NETWORK_CLASSICAL) {
-    // Populate policyFormat and valueFormat fields in old protobufs
-    // without these fields.
-    net->set_network(nf::NETWORK_CLASSICAL_WITH_HEADFORMAT);
-    net->set_value(nf::VALUE_CLASSICAL);
-    net->set_policy(nf::POLICY_CLASSICAL);
-  } else if (network_format == pblczero::NetworkFormat::NETWORK_SE) {
-    net->set_network(nf::NETWORK_SE_WITH_HEADFORMAT);
-    net->set_value(nf::VALUE_CLASSICAL);
-    net->set_policy(nf::POLICY_CLASSICAL);
+  if (pb[0] == '2' && pb[1] == '\n') {
+    throw Exception(
+        "Text format weights files are no longer supported. Use a command line "
+        "tool to convert it to the new format.");
   }
-}
-
-WeightsFile ParseWeightsProto(const std::string& buffer) {
   WeightsFile net;
-  net.ParseFromString(buffer);
+  net.ParseFromString(pb);
 
   if (net.magic() != kWeightMagic) {
     throw Exception("Invalid weight file: bad header.");
@@ -151,8 +80,6 @@ WeightsFile ParseWeightsProto(const std::string& buffer) {
       GetVersionInt(net.min_version().major(), net.min_version().minor(),
                     net.min_version().patch());
 
-  FixOlderWeightsFile(&net);
-
   // Weights files with this signature are also compatible.
   if (net_ver != 0x5c99973 && net_ver > lc0_ver) {
     throw Exception("Invalid weight file: lc0 version >= " + min_version +
@@ -166,88 +93,4 @@ WeightsFile ParseWeightsProto(const std::string& buffer) {
 
   return net;
 }
-
-}  // namespace
-
-WeightsFile LoadWeightsFromFile(const std::string& filename) {
-  FloatVectors vecs;
-  auto buffer = DecompressGzip(filename);
-
-  if (buffer.size() < 2) {
-    throw Exception("Invalid weight file: too small.");
-  }
-  if (buffer[0] == '1' && buffer[1] == '\n') {
-    throw Exception("Invalid weight file: no longer supported.");
-  }
-  if (buffer[0] == '2' && buffer[1] == '\n') {
-    throw Exception(
-        "Text format weights files are no longer supported. Use a command line "
-        "tool to convert it to the new format.");
-  }
-
-  return ParseWeightsProto(buffer);
-}
-
-std::string DiscoverWeightsFile() {
-  const int kMinFileSize = 500000;  // 500 KB
-
-  std::vector<std::string> data_dirs = {CommandLine::BinaryDirectory()};
-  const std::string user_data_path = GetUserDataDirectory();
-  if (!user_data_path.empty()) {
-    data_dirs.emplace_back(user_data_path + "lc0");
-  }
-  for (const auto& dir : GetSystemDataDirectoryList()) {
-    data_dirs.emplace_back(dir + (dir.back() == '/' ? "" : "/") + "lc0");
-  }
-
-  for (const auto& dir : data_dirs) {
-    // Open all files in <dir> amd <dir>/networks,
-    // ones which are >= kMinFileSize are candidates.
-    std::vector<std::pair<time_t, std::string> > time_and_filename;
-    for (const auto& path : {"", "/networks"}) {
-      for (const auto& file : GetFileList(dir + path)) {
-        const std::string filename = dir + path + "/" + file;
-        if (GetFileSize(filename) < kMinFileSize) continue;
-        time_and_filename.emplace_back(GetFileTime(filename), filename);
-      }
-    }
-
-    std::sort(time_and_filename.rbegin(), time_and_filename.rend());
-
-    // Open all candidates, from newest to oldest, possibly gzipped, and try to
-    // read version for it. If version is 2 or if the file is our protobuf,
-    // return it.
-    for (const auto& candidate : time_and_filename) {
-      const gzFile file = gzopen(candidate.second.c_str(), "rb");
-
-      if (!file) continue;
-      unsigned char buf[256];
-      int sz = gzread(file, buf, 256);
-      gzclose(file);
-      if (sz < 0) continue;
-
-      std::string str(buf, buf + sz);
-      std::istringstream data(str);
-      int val = 0;
-      data >> val;
-      if (!data.fail() && val == 2) {
-        CERR << "Found txt network file: " << candidate.second;
-        return candidate.second;
-      }
-
-      // First byte of the protobuf stream is 0x0d for fixed32, so we ignore it
-      // as our own magic should suffice.
-      const auto magic = buf[1] | (static_cast<uint32_t>(buf[2]) << 8) |
-                         (static_cast<uint32_t>(buf[3]) << 16) |
-                         (static_cast<uint32_t>(buf[4]) << 24);
-      if (magic == kWeightMagic) {
-        CERR << "Found pb network file: " << candidate.second;
-        return candidate.second;
-      }
-    }
-  }
-  LOGFILE << "Network weights file not found.";
-  return {};
-}
-
 }  // namespace lczero
diff --git a/src/neural/loader.h b/src/neural/loader.h
index 279e87e..6cf2087 100644
--- a/src/neural/loader.h
+++ b/src/neural/loader.h
@@ -40,12 +40,6 @@ using FloatVectors = std::vector<FloatVector>;
 
 using WeightsFile = pblczero::Net;
 
-// Read weights file and fill the weights structure.
-WeightsFile LoadWeightsFromFile(const std::string& filename);
-
-// Tries to find a file which looks like a weights file, and located in
-// directory of binary_name or one of subdirectories. If there are several such
-// files, returns one which has the latest modification date.
-std::string DiscoverWeightsFile();
+WeightsFile LoadWeightsFromBuffer(const unsigned char* buf, size_t sz);
 
 }  // namespace lczero
diff --git a/src/selfplay/tournament.cc b/src/selfplay/tournament.cc
index cd9b7f7..d94629e 100644
--- a/src/selfplay/tournament.cc
+++ b/src/selfplay/tournament.cc
@@ -181,7 +181,7 @@ SelfPlayTournament::SelfPlayTournament(
       const auto& opts = options.GetSubdict(name).GetSubdict(color);
       const auto config = NetworkFactory::BackendConfiguration(opts);
       if (networks_.find(config) == networks_.end()) {
-        networks_.emplace(config, NetworkFactory::LoadNetwork(opts));
+        networks_.emplace(config, NetworkFactory::LoadNetwork(opts, nullptr));
       }
     }
   }
diff --git a/src/utils/exception.h b/src/utils/exception.h
index 7602d5a..bdec04e 100644
--- a/src/utils/exception.h
+++ b/src/utils/exception.h
@@ -36,7 +36,7 @@ namespace lczero {
 class Exception : public std::runtime_error {
  public:
   Exception(const std::string& what) : std::runtime_error(what) {
-    LOGFILE << "Exception: " << what;
+    EXCEPTION(what);
   }
 };
 
diff --git a/src/utils/logging.cc b/src/utils/logging.cc
index b4d4aa1..b2d808c 100644
--- a/src/utils/logging.cc
+++ b/src/utils/logging.cc
@@ -30,6 +30,7 @@
 #include <iomanip>
 #include <iostream>
 #include <thread>
+#include <emscripten.h>
 
 namespace lczero {
 
@@ -45,28 +46,8 @@ Logging& Logging::Get() {
 
 void Logging::WriteLineRaw(const std::string& line) {
   Mutex::Lock lock_(mutex_);
-  if (filename_.empty()) {
-    buffer_.push_back(line);
-    if (buffer_.size() > kBufferSizeLines) buffer_.pop_front();
-  } else {
-    auto& file = (filename_ == kStderrFilename) ? std::cerr : file_;
-    file << line << std::endl;
-  }
-}
-
-void Logging::SetFilename(const std::string& filename) {
-  Mutex::Lock lock_(mutex_);
-  if (filename_ == filename) return;
-  filename_ = filename;
-  if (filename.empty() || filename == kStderrFilename) {
-    file_.close();
-  }
-  if (filename.empty()) return;
-  if (filename != kStderrFilename) file_.open(filename, std::ios_base::app);
-  auto& file = (filename == kStderrFilename) ? std::cerr : file_;
-  file << "\n\n============= Log started. =============" << std::endl;
-  for (const auto& line : buffer_) file << line << std::endl;
-  buffer_.clear();
+  buffer_.push_back(line);
+  if (buffer_.size() > kBufferSizeLines) buffer_.pop_front();
 }
 
 LogMessage::LogMessage(const char* file, int line) {
@@ -93,6 +74,21 @@ StdoutLogMessage::~StdoutLogMessage() {
   log_ << str();
 }
 
+EM_JS(void, js_log, (const char* str), {
+  Module._exception(UTF8ToString(str));
+});
+
+void ExceptionMessage(const char* file, int line, const std::string& what) {
+  std::ostringstream ss;
+  ss << FormatTime(std::chrono::system_clock::now()) << ' '
+        << std::setfill(' ') << std::this_thread::get_id() << std::setfill('0')
+        << ' ' << file << ':' << line << "] " << what << std::endl;
+  char stackTrace[8192];
+  emscripten_get_callstack(/*EM_LOG_C_STACK*/0, stackTrace, sizeof(stackTrace));
+  ss << stackTrace << std::endl;
+  js_log(ss.str().c_str());
+}
+
 std::chrono::time_point<std::chrono::system_clock> SteadyClockToSystemClock(
     std::chrono::time_point<std::chrono::steady_clock> time) {
   return std::chrono::system_clock::now() +
diff --git a/src/utils/logging.h b/src/utils/logging.h
index a9508de..663ad0b 100644
--- a/src/utils/logging.h
+++ b/src/utils/logging.h
@@ -28,7 +28,6 @@
 #pragma once
 
 #include <deque>
-#include <fstream>
 #include <iomanip>
 #include <sstream>
 #include <string>
@@ -41,16 +40,11 @@ class Logging {
  public:
   static Logging& Get();
 
-  // Sets the name of the log. Empty name disables logging.
-  void SetFilename(const std::string& filename);
-
  private:
   // Writes line to the log, and appends new line character.
   void WriteLineRaw(const std::string& line);
 
   Mutex mutex_;
-  std::string filename_ GUARDED_BY(mutex_);
-  std::ofstream file_ GUARDED_BY(mutex_);
   std::deque<std::string> buffer_ GUARDED_BY(mutex_);
 
   Logging() = default;
@@ -81,6 +75,8 @@ class StdoutLogMessage : public std::ostringstream {
   LogMessage log_;
 };
 
+void ExceptionMessage(const char *file, int line, const std::string& what);
+
 std::chrono::time_point<std::chrono::system_clock> SteadyClockToSystemClock(
     std::chrono::time_point<std::chrono::steady_clock> time);
 
@@ -89,4 +85,5 @@ std::string FormatTime(std::chrono::time_point<std::chrono::system_clock> time);
 
 #define LOGFILE ::lczero::LogMessage(__FILE__, __LINE__)
 #define CERR ::lczero::StderrLogMessage(__FILE__, __LINE__)
-#define COUT ::lczero::StdoutLogMessage(__FILE__, __LINE__)
\ No newline at end of file
+#define COUT ::lczero::StdoutLogMessage(__FILE__, __LINE__)
+#define EXCEPTION(x) ::lczero::ExceptionMessage(__FILE__, __LINE__, x)
\ No newline at end of file
diff --git a/src/utils/optionsparser.cc b/src/utils/optionsparser.cc
index e725348..78442cb 100644
--- a/src/utils/optionsparser.cc
+++ b/src/utils/optionsparser.cc
@@ -31,8 +31,6 @@
 #include <iostream>
 #include <sstream>
 
-#include "utils/commandline.h"
-#include "utils/configfile.h"
 #include "utils/logging.h"
 #include "utils/string.h"
 
@@ -123,87 +121,10 @@ const OptionsDict& OptionsParser::GetOptionsDict(const std::string& context) {
 }
 
 bool OptionsParser::ProcessAllFlags() {
-  return ProcessFlags(ConfigFile::Arguments()) &&
-         ProcessFlags(CommandLine::Arguments());
+  return true;
 }
 
 bool OptionsParser::ProcessFlags(const std::vector<std::string>& args) {
-  auto show_help = false;
-  if (CommandLine::BinaryName().find("pro") != std::string::npos) {
-    ShowHidden();
-  }
-  for (auto iter = args.begin(), end = args.end(); iter != end; ++iter) {
-    std::string param = *iter;
-    if (param == "--show-hidden") {
-      ShowHidden();
-      continue;
-    }
-    if (param == "-h" || param == "--help") {
-      // Set a flag so that --show-hidden after --help works.
-      show_help = true;
-      continue;
-    }
-
-    if (param.substr(0, 2) == "--") {
-      std::string context;
-      param = param.substr(2);
-      std::string value;
-      auto pos = param.find('=');
-      if (pos != std::string::npos) {
-        value = param.substr(pos + 1);
-        param = param.substr(0, pos);
-      }
-      pos = param.rfind('.');
-      if (pos != std::string::npos) {
-        context = param.substr(0, pos);
-        param = param.substr(pos + 1);
-      }
-      bool processed = false;
-      Option* option = FindOptionByLongFlag(param);
-      if (option &&
-          option->ProcessLongFlag(param, value, GetMutableOptions(context))) {
-        processed = true;
-      }
-      if (!processed) {
-        CERR << "Unknown command line flag: " << *iter << ".";
-        CERR << "For help run:\n  " << CommandLine::BinaryName() << " --help";
-        return false;
-      }
-      continue;
-    }
-    if (param.size() == 2 && param[0] == '-') {
-      std::string value;
-      bool processed = false;
-      if (iter + 1 != end) {
-        value = *(iter + 1);
-      }
-      for (auto& option : options_) {
-        if (option->ProcessShortFlag(param[1], GetMutableOptions())) {
-          processed = true;
-          break;
-        } else if (option->ProcessShortFlagWithValue(param[1], value,
-                                                     GetMutableOptions())) {
-          if (!value.empty()) ++iter;
-          processed = true;
-          break;
-        }
-      }
-      if (!processed) {
-        CERR << "Unknown command line flag: " << *iter << ".";
-        CERR << "For help run:\n  " << CommandLine::BinaryName() << " --help";
-        return false;
-      }
-      continue;
-    }
-
-    CERR << "Unknown command line argument: " << *iter << ".\n";
-    CERR << "For help run:\n  " << CommandLine::BinaryName() << " --help";
-    return false;
-  }
-  if (show_help) {
-    ShowHelp();
-    return false;
-  }
   return true;
 }
 
@@ -262,31 +183,6 @@ std ::string FormatFlag(char short_flag, const std::string& long_flag,
 }  // namespace
 
 void OptionsParser::ShowHelp() const {
-  std::cout << "Usage: " << CommandLine::BinaryName() << " [<mode>] [flags...]"
-            << std::endl;
-
-  std::cout << "\nAvailable modes. A help for a mode: "
-            << CommandLine::BinaryName() << " <mode> --help\n";
-  for (const auto& mode : CommandLine::GetModes()) {
-    std::cout << "  " << std::setw(10) << std::left << mode.first << " "
-              << mode.second << std::endl;
-  }
-
-  std::cout << "\nAllowed command line flags for current mode:\n";
-  std::cout << FormatFlag('h', "help", "Show help and exit.");
-  std::cout << FormatFlag('\0', "show-hidden",
-                          "Show hidden options. Use with --help.");
-  for (const auto& option : options_) {
-    if (!option->hidden_) std::cout << option->GetHelp(defaults_);
-  }
-
-  auto contexts = values_.ListSubdicts();
-  if (!contexts.empty()) {
-    std::cout << "\nFlags can be defined per context (one of: "
-              << StrJoin(contexts, ", ") << "), for example:\n";
-    std::cout << "       --" << contexts[0] << '.'
-              << options_.back()->GetLongFlag() << "=(value)\n";
-  }
 }
 
 void OptionsParser::ShowHidden() const {
diff --git a/src/utils/weights_adapter.cc b/src/utils/weights_adapter.cc
index 2a5d196..99ed832 100644
--- a/src/utils/weights_adapter.cc
+++ b/src/utils/weights_adapter.cc
@@ -25,7 +25,7 @@
   Program grant you additional permission to convey the resulting work.
 */
 
-#include "src/utils/weights_adapter.h"
+#include "utils/weights_adapter.h"
 
 namespace lczero {
 float LayerAdapter::Iterator::ExtractValue(const uint16_t* ptr,
diff --git a/src/version.h b/src/version.h
index 53ab769..b38e731 100644
--- a/src/version.h
+++ b/src/version.h
@@ -31,7 +31,6 @@
 
 #include <string>
 #include "version.inc"
-#include "build_id.h"
 
 std::uint32_t GetVersionInt(int major = LC0_VERSION_MAJOR,
                             int minor = LC0_VERSION_MINOR,
@@ -41,4 +40,4 @@ std::string GetVersionStr(int major = LC0_VERSION_MAJOR,
                           int minor = LC0_VERSION_MINOR,
                           int patch = LC0_VERSION_PATCH,
                           const std::string& postfix = LC0_VERSION_POSTFIX,
-                          const std::string& build_id = BUILD_IDENTIFIER);
+                          const std::string& build_id = "zerofish");
